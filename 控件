// 控件3.cpp : 定义应用程序的入口点。
//

#include "framework.h"
#include "控件3.h"
#include <string>

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;                                // 当前实例
WCHAR szTitle[MAX_LOADSTRING];                  // 标题栏文本
WCHAR szWindowClass[MAX_LOADSTRING];            // 主窗口类名

// 此代码模块中包含的函数的前向声明:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 在此处放置代码。

    // 初始化全局字符串
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_MY3, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 执行应用程序初始化:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY3));

    MSG msg;

    // 主消息循环:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目标: 注册窗口类。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY3));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY3);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目标: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // 将实例句柄存储在全局变量中

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

void createck(HWND hWndParent)
{
    CreateWindow(_T("static"), _T("请输入内容："), WS_CHILD | WS_VISIBLE, 10, 15, 100, 30, hWndParent, (HMENU)5001, hInst, nullptr);
    CreateWindow(_T("edit"), _T(""), WS_CHILD | WS_VISIBLE | WS_BORDER,
        110, 15, 300, 30, hWndParent, (HMENU)6001, hInst, nullptr);

    CreateWindow(_T("button"), _T("添加数据"), WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
        110, 50, 100, 30, hWndParent, (HMENU)7001, hInst, nullptr);
    CreateWindow(_T("button"), _T("删除数据"), WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
        310, 50, 100, 30, hWndParent, (HMENU)7002, hInst, nullptr);

    //组合框 类名:combobox
    //分为3类：CBS_DROPDOWN 下拉式组合框  CBS_SIMPLE 简单组合框  CBS_DROPDOWNLIST 下位列表式组合框
    CreateWindow(_T("combobox"), _T(""), WS_CHILD | WS_VISIBLE | CBS_DROPDOWN | WS_BORDER,
        110, 100, 300, 180, hWndParent, (HMENU)8001, hInst, nullptr);

}
TCHAR strArr[1024] = {};
TCHAR strArr1[1024] = {};

INT_PTR CALLBACK DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        createck(hDlg);
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        switch (LOWORD(wParam))
        {
        case 7001:
            GetDlgItemText(hDlg, 6001, strArr, 1023);
            SetDlgItemText(hDlg, 8001, strArr);
            SendMessage(GetDlgItem(hDlg, 8001), CB_ADDSTRING, 1, (LPARAM)strArr);
            break;
        case 7002:
            //GetDlgItemText(hDlg, 6001, strArr, 1023);
            //SendMessage(GetDlgItem(hDlg, 8001), CB_INSERTSTRING, 2, (LPARAM)strArr);

            //SendMessage(GetDlgItem(hDlg, 8001), CB_DELETESTRING, 1, 0);
            //SendMessage(GetDlgItem(hDlg, 8001), CB_RESETCONTENT, 1, 0);
         
            int lb = SendMessage(GetDlgItem(hDlg, 8001), CB_GETCURSEL, 0, 0);
            SendMessage(GetDlgItem(hDlg, 8001), CB_DELETESTRING, lb,0);
          
            MessageBox(0, TEXT("lb"),0,0);
            
        }
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
        }
    }
    return (INT_PTR)FALSE;
}
//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目标: 处理主窗口的消息。
//
//  WM_COMMAND  - 处理应用程序菜单
//  WM_PAINT    - 绘制主窗口
//  WM_DESTROY  - 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    int wmId, wmEvent;
  
    HDC hdc;
    switch (message)
    {
    case WM_RBUTTONDOWN:
        DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG1), hWnd, DlgProc);
        break;
    case WM_COMMAND:
        {
             wmId = LOWORD(wParam);
            // 分析菜单选择:
           
             switch (wmId)
             {
             case WM_RBUTTONDOWN:
                 DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG1), hWnd, DlgProc); break;
             case WM_COMMAND:
                 wmId = LOWORD(wParam);
                 wmEvent = HIWORD(wParam);
                 // 分析菜单选择: 
                 switch (wmId)
                 {
                 case IDM_ABOUT:
                     DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                     break;
                 case IDM_EXIT:
                     DestroyWindow(hWnd);
                     break;
                 default:
                     return DefWindowProc(hWnd, message, wParam, lParam);
                 }
                 break;
             }
        }
        break;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            // TODO: 在此处添加使用 hdc 的任何绘图代码...
            EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

